"use strict";(globalThis.webpackChunkc_3_d_org=globalThis.webpackChunkc_3_d_org||[]).push([[3493],{2617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"appendix/integers-and-bytes/unsigned-numbers","title":"Unsigned numbers","description":"Many of the traditional C3D file storage limits have been eliminated by interpreting many of the stored integer values as unsigned integers instead of signed integers in situations where a negative value would not be possible.  The use of unsigned integers and unsigned bytes in the C3D file format since 2004 has effectively doubled the amount of parameter and data storage that is available within the C3D file as compared to the original specification.  This affects the interpretation of the C3D file data but does not change the content of the C3D file at a binary level so all older C3D files created prior to the interpretation change remain compatible and readable because the file format is unchanged at a binary level.","source":"@site/docs/appendix/integers-and-bytes/unsigned-numbers.md","sourceDirName":"appendix/integers-and-bytes","slug":"/appendix/integers-and-bytes/unsigned-numbers","permalink":"/appendix/integers-and-bytes/unsigned-numbers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Unsigned numbers"},"sidebar":"tutorialSidebar","previous":{"title":"Signed numbers","permalink":"/appendix/integers-and-bytes/signed-numbers"},"next":{"title":"The C3D frame count","permalink":"/appendix/the-c3d-frame-count/"}}');var i=n(4848),s=n(8453);const r={title:"Unsigned numbers"},o=void 0,l={},d=[];function h(e){const t={p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Many of the traditional C3D file storage limits have been eliminated by interpreting many of the stored integer values as unsigned integers instead of signed integers in situations where a negative value would not be possible.  The use of unsigned integers and unsigned bytes in the C3D file format since 2004 has effectively doubled the amount of parameter and data storage that is available within the C3D file as compared to the original specification.  This affects the interpretation of the C3D file data but does not change the content of the C3D file at a binary level so all older C3D files created prior to the interpretation change remain compatible and readable because the file format is unchanged at a binary level."}),"\n",(0,i.jsxs)(t.p,{children:["By interpreting the stored frame count (POINT",":FRAMES",") as an unsigned integer, the maximum number of 3D frames that can be stored in a C3D file is 65535, which increases the length of 3D data that can be recorded in the C3D file to just over 18 minutes at 60Hz e.g. 65535 / (60 * 60).  When the 65535 integer frame limit is exceeded, the POINT",":FRAMES"," count can be written as a floating-point value.  In addition, interpreting the parameter (POINT",":DATA_START",") as an unsigned integer allows the 3D data storage section to start anywhere within the first 32Mb (65535*512/1024) of the C3D file."]}),"\n",(0,i.jsx)(t.p,{children:"The length of most parameter items, pointers, and indexes can be interpreted as an  unsigned byte within the parameter records without making any change to the contents of a C3D file at a binary level.  This extends the amount of parameter storage available from 127 characters per value to 255 characters and allows many parameter dimensions to have up to 255 separate values (the signed limit was 127). The C3D group and parameter name lengths must always be interpreted as a signed integer because the C3D format uses the sign of the stored name length to indicate the locked, or unlocked, status of the parameter."}),"\n",(0,i.jsx)(t.p,{children:"While the use of unsigned integers and unsigned bytes within the parameters of a C3D file could create problems for older C3D applications that interpret large unsigned values as negative values, this is does not affect the interpretation of data within the various sections.  For instance, when using the C3D integer file formats, point data within the 3D data section is always stored as signed integer values and analog data within the 3D data section is also stored as signed integers by default.  As a result, almost all older C3D applications will remain able to read, write, and process C3D files created in the modern environment so long as the new files sizes do not exceed the traditional size limits which are normally adequate for most clinical and biomechanical data collection environments."}),"\n",(0,i.jsx)(t.p,{children:"Regardless of the integer format interpretation, for all practical purposes, files that store pointers as signed, or unsigned integers are identical at a binary level \u2013 it is the interpretation of the data values by the application that defines whether the file is considered to be signed or unsigned.  Both types of file use the same format for storing 3D and analog data values, which are always stored as signed integers or floating-point values.  The result is that when viewed at a binary level there is no structural difference between the C3D files, the only difference is in the range of numbers that each format supports which is determined by the application that reads and interprets the binary values stored in the file."}),"\n",(0,i.jsx)(t.p,{children:"The determination as to whether a C3D file is using signed integers or unsigned integers is simply a matter of how the application interprets the stored values \u2013 for example arrays do not have negative indexes, a file cannot contain a negative number of data points or channels, and cannot store a negative number of frames."}),"\n",(0,i.jsx)(t.p,{children:"While in the majority of instances, interpreting the stored integers as unsigned integers removes this as an issue, certain parameter integer bytes (group ID\u2019s, parameter ID\u2019s, group and parameter lengths etc.) remain signed values."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);