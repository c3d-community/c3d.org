"use strict";(globalThis.webpackChunkc_3_d_org=globalThis.webpackChunkc_3_d_org||[]).push([[6187],{5737:(a,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"the-3d-point-data-section/analog-data-section/analog-data-floating-point-format/index","title":"Analog Data - Floating-point format","description":"When storing analog data using floating-point format, the analog information is stored as a floating-point value.  This should usually be the (12 to 16 bit resolution) analog sample value after conversion to a floating-point value \u2013 for example in the ADC sample value is 1024 then it must be stored as 1024.000 as a floating-point value.  Floating-point analog data storage is organized in exactly the same way, within the C3D file data section, as the integer analog data.  The stored analog data values must never be stored as pre-scaled values as this effectively destroys vital information about the analog data sampling and processing.","source":"@site/docs/the-3d-point-data-section/analog-data-section/analog-data-floating-point-format/index.md","sourceDirName":"the-3d-point-data-section/analog-data-section/analog-data-floating-point-format","slug":"/the-3d-point-data-section/analog-data-section/analog-data-floating-point-format/","permalink":"/c3d.org/the-3d-point-data-section/analog-data-section/analog-data-floating-point-format/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Analog Data - Floating-point format"},"sidebar":"tutorialSidebar","previous":{"title":"Analog Data Storage","permalink":"/c3d.org/the-3d-point-data-section/analog-data-section/"},"next":{"title":"Notes for programmers - Floating-point Analog Data","permalink":"/c3d.org/the-3d-point-data-section/analog-data-section/analog-data-floating-point-format/notes-for-programmers-floating-point-analog-data"}}');var o=e(4848),i=e(8453);const s={title:"Analog Data - Floating-point format"},l=void 0,r={},d=[];function c(a){const t={li:"li",p:"p",ul:"ul",...(0,i.R)(),...a.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"When storing analog data using floating-point format, the analog information is stored as a floating-point value.  This should usually be the (12 to 16 bit resolution) analog sample value after conversion to a floating-point value \u2013 for example in the ADC sample value is 1024 then it must be stored as 1024.000 as a floating-point value.  Floating-point analog data storage is organized in exactly the same way, within the C3D file data section, as the integer analog data.  The stored analog data values must never be stored as pre-scaled values as this effectively destroys vital information about the analog data sampling and processing."}),"\n",(0,o.jsxs)(t.p,{children:["The parameters ANALOG",":GEN_SCALE"," and channel specific ANALOG",":SCALE"," and ANALOG",":OFFSET"," values must be applied to the floating-point value to obtain physical world units in exactly the same way as we scale the integer formatted data."]}),"\n",(0,o.jsx)(t.p,{children:"Thus, a floating-point analog sample is calculated as:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"physical world value = (data value - offset) * channel scale * general scale"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Where:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\u2018offset\u2019 is in the \u201cANALOG",":OFFSET","\u201d parameters (integer)"]}),"\n",(0,o.jsxs)(t.li,{children:["\u2018channel scale\u2019 is in the \u201cANALOG",":SCALE","\u201d parameters (floating-point)"]}),"\n",(0,o.jsxs)(t.li,{children:["\u2018general scale\u2019 is the \u201cANALOG",":GEN_SCALE","\u201d parameter (floating-point)"]}),"\n"]})]})}function g(a={}){const{wrapper:t}={...(0,i.R)(),...a.components};return t?(0,o.jsx)(t,{...a,children:(0,o.jsx)(c,{...a})}):c(a)}},8453:(a,t,e)=>{e.d(t,{R:()=>s,x:()=>l});var n=e(6540);const o={},i=n.createContext(o);function s(a){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof a?a(t):{...t,...a}},[t,a])}function l(a){let t;return t=a.disableParentContext?"function"==typeof a.components?a.components(o):a.components||o:s(a.components),n.createElement(i.Provider,{value:t},a.children)}}}]);