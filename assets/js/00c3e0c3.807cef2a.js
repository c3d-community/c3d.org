"use strict";(globalThis.webpackChunkc_3_d_org=globalThis.webpackChunkc_3_d_org||[]).push([[932],{1925:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"the-3d-point-data-section/description/3d-data-floating-point-format/notes-for-programmers-floating-point-3d-data","title":"Notes for programmers - Floating-point 3D Data","description":"1.  The POINT:SCALE parameter is copied to the C3D file header (words 7-8) and can be quickly located and read by applications once they have determined which of the C3D processor formats (DEC, Intel, and SGI/MIPS) is used.","source":"@site/docs/the-3d-point-data-section/description/3d-data-floating-point-format/notes-for-programmers-floating-point-3d-data.md","sourceDirName":"the-3d-point-data-section/description/3d-data-floating-point-format","slug":"/the-3d-point-data-section/description/3d-data-floating-point-format/notes-for-programmers-floating-point-3d-data","permalink":"/c3d.org/the-3d-point-data-section/description/3d-data-floating-point-format/notes-for-programmers-floating-point-3d-data","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Notes for programmers - Floating-point 3D Data"},"sidebar":"tutorialSidebar","previous":{"title":"3D Data - Floating-point Format","permalink":"/c3d.org/the-3d-point-data-section/description/3d-data-floating-point-format/"},"next":{"title":"3D Data - Integer Format","permalink":"/c3d.org/the-3d-point-data-section/description/3d-data-integer-format/"}}');var n=a(4848),i=a(8453);const r={title:"Notes for programmers - Floating-point 3D Data"},s=void 0,d={},l=[];function c(t){const e={li:"li",ol:"ol",p:"p",...(0,i.R)(),...t.components};return(0,n.jsxs)(e.ol,{children:["\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsxs)(e.p,{children:["The POINT",":SCALE"," parameter is copied to the C3D file header (words 7-8) and can be quickly located and read by applications once they have determined which of the C3D processor formats (DEC, Intel, and SGI/MIPS) is used."]}),"\n"]}),"\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsx)(e.p,{children:"When a file contains floating-point scaled 3D data then analog data samples will be stored in floating-point format.  However the C3D format will apply the analog scaling calculations to the stored sample values so analog data samples should not be modified or scaled prior to storage."}),"\n"]}),"\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsxs)(e.p,{children:["If the 3D data points are stored in floating-point format, the X, Y, and Z coordinates have been already multiplied by the scale factor.  Words 7-8 contain normal 4th word signed integer value stored as a floating-point number.  To extract the mask and residual data, this word should be converted to a signed integer, divided into high and low bytes, and the low byte multiplied by the absolute value of the POINT",":SCALE"," parameter to obtain the correct residual value."]}),"\n"]}),"\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsxs)(e.p,{children:["It is important to realize that the sign of the POINT",":SCALE"," parameter and the magnitude of the parameter are treated as two independent factors in floating-point data files.  The sign simply indicates that the file is a floating-point format, while the magnitude is used to scale the residual values and should be set to an appropriate value (maximum coordinate/32000) in case the C3D file is converted to integer format.  Failure to calculate and store a valid POINT",":SCALE"," parameter will cause corruption if the file data is format is changed to an integer format for any reason."]}),"\n"]}),"\n",(0,n.jsxs)(e.li,{children:["\n",(0,n.jsxs)(e.p,{children:["Within each 3D frame, the 3D points are stored in the order recorded by the parameter POINT",":LABELS"," followed by the analog data, if present."]}),"\n"]}),"\n"]})}function p(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}},8453:(t,e,a)=>{a.d(e,{R:()=>r,x:()=>s});var o=a(6540);const n={},i=o.createContext(n);function r(t){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:r(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);