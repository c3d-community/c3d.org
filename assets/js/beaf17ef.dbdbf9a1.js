"use strict";(globalThis.webpackChunkc_3_d_org=globalThis.webpackChunkc_3_d_org||[]).push([[1920],{931:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"the-parameter-section/c3d-groups-and-parameters/group-format","title":"Group Format","description":"The first byte of a C3D group record is a one\u2019s complement signed 8-bit integer that stores the number of characters in the group name.  Group names can have from 1 to 127 characters (using the standard ASCII character set; A-Z, underscore, and 0-9) although four characters should generally be considered a minimum and twenty characters plenty.  The group name is simple a \u201cname\u201d that if used to reference the associated collection of parameters, it does not have to be long and descriptive \u2013 use the group description string to document its functionality.  All group names must start with the characters A-Z. The character count is always read as a positive number regardless of the actual sign of the stored value.","source":"@site/docs/the-parameter-section/c3d-groups-and-parameters/group-format.md","sourceDirName":"the-parameter-section/c3d-groups-and-parameters","slug":"/the-parameter-section/c3d-groups-and-parameters/group-format","permalink":"/the-parameter-section/c3d-groups-and-parameters/group-format","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Group Format"},"sidebar":"tutorialSidebar","previous":{"title":"C3D Groups and Parameters","permalink":"/the-parameter-section/c3d-groups-and-parameters/"},"next":{"title":"Locked Parameters","permalink":"/the-parameter-section/c3d-groups-and-parameters/locked-parameters/"}}');var o=r(4848),n=r(8453);const s={title:"Group Format"},i=void 0,c={},h=[];function u(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"The first byte of a C3D group record is a one\u2019s complement signed 8-bit integer that stores the number of characters in the group name.  Group names can have from 1 to 127 characters (using the standard ASCII character set; A-Z, underscore, and 0-9) although four characters should generally be considered a minimum and twenty characters plenty.  The group name is simple a \u201cname\u201d that if used to reference the associated collection of parameters, it does not have to be long and descriptive \u2013 use the group description string to document its functionality.  All group names must start with the characters A-Z. The character count is always read as a positive number regardless of the actual sign of the stored value."}),"\n",(0,o.jsx)(t.p,{children:"The second byte of the group record contains the group ID number \u2013 this is always a negative value between \u20131 and \u2013127 (hence it must be read as a one\u2019s complement signed byte) and is used to link parameters to their groups.  A parameter with a positive ID value that matches a negative group ID number \u201cbelongs\u201d to that group.  Note that the actual value chosen for a group ID number is not fixed and may vary from one C3D file to another.  It is not required that group ID numbers are assigned in a contiguous sequence.  In the example shown the group ID number is 0xFFh, which is read as \u20131 (signed integer), thus all parameters with a parameter ID of 0x01 will belong to this group."}),"\n",(0,o.jsx)(t.p,{children:"Each group name must be unique and use only 7-bit ASCII upper case, numeric or underscore characters. The string containing the group name starts at the third byte.  Group names can have from 1 to 127 characters (using the character sets A-Z and 0-9) although four (4) characters should generally be considered a minimum.  Group names should not start with a number.  The hex dump shows the format for the POINT group record with a description where the characters POINT are stored (in hex) as 0x50, 0x4F, 0x49, 0x4E, and 0x54."}),"\n",(0,o.jsx)(t.p,{children:"A word pointer to the next parameter data structure follows the group name string unless this is the last parameter in the parameter section.  The last parameter in the parameter section always has a pointer value of 0x0000h to indicate that there are no more parameters following.  In the example shown here, the pointer has the value 0x0017h, indicating that the next parameter record starts in 23 bytes.  While a group description is not required, if you are creating a new group or parameter then it is recommended that you describe it so that other users who open the file will understand its function."}),"\n",(0,o.jsx)(t.p,{children:"A single byte follows the pointer to the next parameter data structure \u2013 this stores the length of the group description string (0-255 characters) that immediately follows this byte.  The group description can contain mixed case characters as well as space characters and is generally used to provide a human-readable description of the group function - UTF-8 encoding is permitted in the description string.  In the example above, the description length is 0x14h \u2013 the group description \u201c3-D point parameters\u201d contains 20 characters, while the \u201cPOINT\u201d group below has no description string resulting in a description length of 0x00h."}),"\n",(0,o.jsx)(t.p,{children:"Although the example above does not have any associated description it is strongly recommended that the description string be used at all times to provide some basic information about the parameter item and its use.  Consider this as simply good programming practice to provide some documentation about the information stored in the C3D file."})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var a=r(6540);const o={},n=a.createContext(o);function s(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);