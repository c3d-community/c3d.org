<?xml version="1.0" encoding="utf-8"?>
<html><head><title>DEC, Intel, and SGI/MIPS</title>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" /><link rel="stylesheet" type="text/css" href="../Theme/popupmenu.css" /><link rel="stylesheet" type="text/css" href="../Theme/lf.css" /><link rel="stylesheet" type="text/css" href="../LinksExt/C1H_HTML.css" /><link rel="stylesheet" type="text/css" href="../LinksExt/Glossary.css" />
<script language="JavaScript" src="../linker.js" type="text/JavaScript"></script>

<script language="JavaScript" src="../special.js" type="text/JavaScript"></script>

<script language="JavaScript" src="../common.js" type="text/JavaScript"></script>

<meta name="Generator" content="ComponentOne Doc-To-Help v.2009.3.0.500" />
<meta name="D2HTheme" content="C3D v.138" />
</head>
<body onmousedown="d2hpopup()" onload="d2hload();d2hProcessHighlight();" style="BACKGROUND-COLOR: lightyellow" relpart="../">
<script language="JavaScript" type="text/JavaScript">
//<![CDATA[

if (typeof d2hLoadWindows != "undefined")

    d2hLoadWindows();


//]]></script>

<p class="GlossaryHeading">DEC, Intel, and SGI/MIPS</p>
<p class="Definition"><b>DEC</b> is the default format for data created in a 
Digital Equipment Corporation environment, typically an RSX-11M or VAX operating 
system.</p>
<p class="Definition"><b>Intel</b> is normally the default format for data created 
in an MSDOS or Microsoft Windows environment.</p>
<p class="Definition"><b>SGI/MIPS</b> is the default format for data created in a 
Silicon Graphics Inc., or MIPS Technologies environment, typically RISC based 3D 
graphics workstations.</p>
<p class="MsoBodyText">As a result of the implementation of the C3D file format in 
different computing hardware environments, C3D files can use three different <a onclick="return d2hpopup(event, this.href)" id="popup_104307" href="gloss_endian.htm">endian</a> representations, DEC, Intel, and SGI/MIPS, 
each of which stores <a onclick="return d2hpopup(event, this.href)" id="popup_104305" href="gloss_integer.htm">integer</a> and <a onclick="return d2hpopup(event, this.href)" id="popup_104304" href="gloss_floatingpoint1.htm">floating-point</a> values in byte 
different  order – big endian, or little endian.  These describe the 
order in which <a onclick="return d2hpopup(event, this.href)" id="popup_104308" href="gloss_bytes.htm">bytes</a>, representing numbers, are stored.  Both 
the DEC and Intel processors use the little endian method for integer storage 
where the lowest bytes are stored first while the SGI/MIPS processors use the 
big endian method. The C3D file endian structure information can be retrieved 
from the parameter header record at the start of the parameter <a onclick="return d2hpopup(event, this.href)" id="popup_104306" href="gloss_section.htm">section</a>.</p>
<p class="MsoBodyText">In addition, the floating-point format storage differs 
between all three processors.  The original floating-point format created 
by DEC was later modified by Intel and then standardized as the IEEE-754 format 
used by Intel and SGI/MIPS processors.</p>
<p class="MsoBodyText">The IEEE-754 format uses a sign-magnitude representation 
where the difference between a positive value (e.g. +1) and its negative value 
(-1) is the MSB of the word, thus zero can have two values, one positive and one 
negative.  The DEC floating-point format has the same mantissa with a 
"hidden 1 bit", offset binary exponent to the left of the mantissa, but when the 
numbers are negative, the DEC format stores the value as the 2's complement of 
the positive value.  So there is no negative zero representation, the DEC 
format only supports one unsigned zero value.  All formats need to be 
supported for compatibility and data exchange.</p></body></html>
